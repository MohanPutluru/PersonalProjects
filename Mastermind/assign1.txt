Assign1: Due 11:59PM October 1

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

Using Test First Development (no code without test first) let's implement the problem designed in hw2. Feel free to evolve that design and use judgment to make changes based on the improved understanding and learning. You are not required to use any of the design idea or languages you mentioned in hw2, apply decisions based on your renewed learnings.

Please take small steps and ask for frequent reviews.

First start with a tests list (tests.txt) and a canary test. Implement at most two more tests and minimum code to make those tests to pass. This is a great first step to complete and ask for a review.

After completing the assignment (and only after) let's answer the following questions:

1. What did you learn mainly in this assignment?

By working on assignment1 we learned how the test cases drive the implementation of code and also by changing the quality of code. We noticed a gradual reduction in code. Frequent reviews provided helped us to improve the code indentations, removing duplicates, using proper naming conventions for functions and methods.

2. How is the current design different, if at all, from the strategic design created in hw2?

In our strategic design, we thought about creating 3 classes to keep GUI, logic, and mastermind all separately. We had many functions to create widgets, buttons and handle the events which we eventually implemented the same functions as thought. 
But as we proceeded to work on assignment 1 which focuses on TDD, by doing tests first and then writing code, we noticed that we only had 2 classes on each for GUI and entire game logic. Most of the methods that we designed in hw2 such as checkColor(), checkPosition(), TrackCount() were still implemented as guess(), checkGameOverDueToWon(), checkGameOverDueToTries() 
by keeping the gist the same.

3. Were there any surprises or things you did not expect along the way? Any particular problem faced, things you had to tackle that you did not expect 
beforehand?

The big surprise we saw was, the reduced lines of code in the main class and various scenarios being implemented in our test class. Implementing GUI was quite challenging as it demanded new things to be learned. After finding resources and examples online we could implement the actual interface as the attached image in hw2 (sampleUIDesign.png). Fixing the build errors and trying to reduce the cyclometric complexity was done during the implementation of the game.

Total [100]: 96
Program runs [10]:
Game works as expected [10]: -1
Colors now showing up on the map when GUI is displayed

All tests pass [20]:
Test quality [15]:
Test for randomness [5]:
Code coverage [10]:
Code quality [10]: -3
Generate random function is too verbose
Remove commented out stuff.
Spelling errors in class name

Design quality [10]:
Response to questions [10]:
